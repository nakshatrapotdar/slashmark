import tensorflow as tf
from tensorflow.keras import layers, models
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.model_selection import train_test_split
import os

# Constants
IMAGE_SIZE = (224, 224)
BATCH_SIZE = 32
EPOCHS = 20

# Data preprocessing
data_dir = '"C:\Users\naksh\OneDrive\Documents\dataset.csv'
classes = ['no_fire', 'fire']

# Create a DataFrame or lists with image paths and corresponding labels

# Split the data into training and testing sets
train_paths, test_paths, train_labels, test_labels = train_test_split(images, labels, test_size=0.2, random_state=42)

# Create data generators
train_datagen = ImageDataGenerator(rescale=1./255, shear_range=0.2, zoom_range=0.2, horizontal_flip=True)
test_datagen = ImageDataGenerator(rescale=1./255)

train_generator = train_datagen.flow_from_dataframe(dataframe=train_df, directory=data_dir,
                                                    x_col='image_path', y_col='label',
                                                    target_size=IMAGE_SIZE, batch_size=BATCH_SIZE,
                                                    class_mode='binary')

test_generator = test_datagen.flow_from_dataframe(dataframe=test_df, directory=data_dir,
                                                  x_col='image_path', y_col='label',
                                                  target_size=IMAGE_SIZE, batch_size=BATCH_SIZE,
                                                  class_mode='binary', shuffle=False)

# Model
model = models.Sequential()
model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(128, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Flatten())
model.add(layers.Dense(128, activation='relu'))
model.add(layers.Dense(1, activation='sigmoid'))

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Training
history = model.fit(train_generator, epochs=EPOCHS, validation_data=test_generator)

# Evaluation
test_loss, test_acc = model.evaluate(test_generator)
print(f'Test Accuracy: {test_acc}')

# Save the model
model.save('forest_fire_detection_model.h5')
